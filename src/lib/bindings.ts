// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type GeoCoordinateStruct = { lat: number; long: number }

export type MissionStageStatusEnum = "Active" | "Inactive" | "Complete" | "Failed"

export type MissionStruct = { mission_name: string; mission_id: number; mission_status: MissionStageStatusEnum; vehicles: VehiclesStruct; zones: ZonesStruct }

export type MissionsStruct = { current_mission: number; missions: MissionStruct[] }

export type PatientStatusEnum = "Secured" | "Unsecured"

export type StageStruct = { stage_name: string; stage_id: number; stage_status: MissionStageStatusEnum; search_area: GeoCoordinateStruct[] }

export type VehicleEnum = "MEA" | "ERU" | "MRA"

export type VehicleStruct = { vehicle_name: VehicleEnum; current_stage: number; is_auto: boolean | null; patient_status: PatientStatusEnum | null; stages: StageStruct[] }

export type VehiclesStruct = { MEA: VehicleStruct; ERU: VehicleStruct; MRA: VehicleStruct }

export type ZoneType = "KeepIn" | "KeepOut"

export type ZonesStruct = { keep_in_zones: GeoCoordinateStruct[][]; keep_out_zones: GeoCoordinateStruct[][] }

const ARGS_MAP = { 'mission':'{"get_default_data":[],"add_stage":["mission_id","vehicle_name","stage_name"],"set_auto_mode":["mission_id","vehicle_name","is_auto"],"transition_stage":["mission_id","vehicle_name"],"delete_mission":["mission_id"],"on_updated":["new_data"],"get_mission_data":["mission_id"],"add_zone":["mission_id","zone_type"],"get_all_missions":[],"delete_stage":["mission_id","vehicle_name","stage_id"],"delete_zone":["mission_id","zone_type","zone_index"],"create_mission":["mission_name"],"set_mission_data":["mission_data"]}' }
export type Router = { 'mission': { on_updated: (newData: MissionsStruct) => Promise<void>, 
get_default_data: () => Promise<MissionsStruct>, 
get_all_missions: () => Promise<MissionsStruct>, 
set_mission_data: (missionData: MissionStruct) => Promise<null>, 
get_mission_data: (missionId: number) => Promise<MissionStruct>, 
create_mission: (missionName: string) => Promise<null>, 
delete_mission: (missionId: number) => Promise<null>, 
set_auto_mode: (missionId: number, vehicleName: VehicleEnum, isAuto: boolean) => Promise<null>, 
add_stage: (missionId: number, vehicleName: VehicleEnum, stageName: string) => Promise<null>, 
delete_stage: (missionId: number, vehicleName: VehicleEnum, stageId: number) => Promise<null>, 
transition_stage: (missionId: number, vehicleName: VehicleEnum) => Promise<null>, 
add_zone: (missionId: number, zoneType: ZoneType) => Promise<null>, 
delete_zone: (missionId: number, zoneType: ZoneType, zoneIndex: number) => Promise<null> } };


export type { InferCommandOutput }
export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
