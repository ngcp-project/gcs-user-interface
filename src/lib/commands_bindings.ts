// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type Coordinate = { latitude: number; longitude: number }

export type GeoCoordinateStruct = { lat: number; long: number }

export type MissionStageStatusEnum = "Active" | "Inactive" | "Complete" | "Failed"

export type MissionStruct = { mission_name: string; mission_id: number; mission_status: MissionStageStatusEnum; vehicles: VehiclesStruct; zones: ZonesStruct }

export type MissionsStruct = { current_mission: number; missions: MissionStruct[] }

export type PatientStatusEnum = "Secured" | "Unsecured"

export type RequestCoordinate = { message_flag: number; request_location: Coordinate; patient_secured?: boolean | null }

export type StageStruct = { stage_name: string; stage_id: number; stage_status: MissionStageStatusEnum; search_area: GeoCoordinateStruct[] }

export type TelemetryData = { vehicle_id: string; signal_strength: number; pitch: number; yaw: number; roll: number; speed: number; altitude: number; battery_life: number; current_position: Coordinate; vehicle_status: string; request_coordinate: RequestCoordinate }

export type VehicleEnum = "MEA" | "ERU" | "MRA"

export type VehicleStruct = { vehicle_name: VehicleEnum; current_stage: number; is_auto: boolean | null; patient_status: PatientStatusEnum | null; stages: StageStruct[] }

export type VehicleTelemetryData = { ERU: TelemetryData; MEA: TelemetryData; MRA: TelemetryData }

export type VehiclesStruct = { MEA: VehicleStruct; ERU: VehicleStruct; MRA: VehicleStruct }

export type ZoneType = "KeepIn" | "KeepOut"

export type ZonesStruct = { keep_in_zones: GeoCoordinateStruct[][]; keep_out_zones: GeoCoordinateStruct[][] }

const ARGS_MAP = { 'telemetry':'{"get_telemetry":[],"on_updated":["new_data"],"get_default_data":[]}', 'commands':'{"send_zone_update":["vehicle_id","zone_id"],"send_emergency_stop":["vehicle_id"],"send_mission_update":["vehicle_id","mission_id"]}', 'mission':'{"transition_stage":["mission_id","vehicle_name"],"set_auto_mode":["mission_id","vehicle_name","is_auto"],"rename_stage":["mission_id","vehicle_name","stage_id","stage_name"],"get_mission_data":["mission_id"],"create_mission":["mission_name"],"get_all_missions":[],"on_updated":["new_data"],"update_stage":["mission_id","vehicle_name","stage_id","new_stage_name","new_status"],"update_zone":["mission_id","zone_type","zone_index","zone_coords"],"start_mission":["mission_id"],"delete_zone":["mission_id","zone_type","zone_index"],"delete_mission":["mission_id"],"delete_stage":["mission_id","vehicle_name","stage_id"],"rename_mission":["mission_id","mission_name"],"add_zone":["mission_id","zone_type"],"add_stage":["mission_id","vehicle_name","stage_name"],"get_default_data":[],"update_stage_area":["mission_id","vehicle_name","stage_id","area"]}' }
export type Router = { 'telemetry': { on_updated: (newData: VehicleTelemetryData) => Promise<void>, 
get_default_data: () => Promise<VehicleTelemetryData>, 
get_telemetry: () => Promise<VehicleTelemetryData> },
'commands': { send_emergency_stop: (vehicleId: string) => Promise<null>, 
send_mission_update: (vehicleId: string, missionId: string) => Promise<null>, 
send_zone_update: (vehicleId: string, zoneId: string) => Promise<null> },
'mission': { on_updated: (newData: MissionsStruct) => Promise<void>, 
get_default_data: () => Promise<MissionsStruct>, 
get_all_missions: () => Promise<MissionsStruct>, 
rename_mission: (missionId: number, missionName: string) => Promise<null>, 
get_mission_data: (missionId: number) => Promise<MissionStruct>, 
create_mission: (missionName: string) => Promise<null>, 
delete_mission: (missionId: number) => Promise<null>, 
start_mission: (missionId: number) => Promise<null>, 
set_auto_mode: (missionId: number, vehicleName: VehicleEnum, isAuto: boolean) => Promise<null>, 
add_stage: (missionId: number, vehicleName: VehicleEnum, stageName: string) => Promise<null>, 
update_stage: (missionId: number, vehicleName: VehicleEnum, stageId: number, newStageName: string | null, newStatus: MissionStageStatusEnum | null) => Promise<null>, 
delete_stage: (missionId: number, vehicleName: VehicleEnum, stageId: number) => Promise<null>, 
rename_stage: (missionId: number, vehicleName: VehicleEnum, stageId: number, stageName: string) => Promise<null>, 
transition_stage: (missionId: number, vehicleName: VehicleEnum) => Promise<null>, 
update_stage_area: (missionId: number, vehicleName: VehicleEnum, stageId: number, area: GeoCoordinateStruct[]) => Promise<null>, 
add_zone: (missionId: number, zoneType: ZoneType) => Promise<null>, 
update_zone: (missionId: number, zoneType: ZoneType, zoneIndex: number, zoneCoords: GeoCoordinateStruct[]) => Promise<null>, 
delete_zone: (missionId: number, zoneType: ZoneType, zoneIndex: number) => Promise<null> } };


export type { InferCommandOutput }
export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
